/**
* Custom Simple Toast Class
* Developed by: oretnom23
* Please load this file with the CustomToast.css file and Google Icons
*/
class CustomToast{
    // Toast Box variable
    toastBox;
    // Toast Box Duration variable
    duration;
    // Valid Toast Icons
    toastIcon = {
        success: `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><circle cx="12" cy="12" r="10" fill="#4caf50"/><path d="M9 16.2l-4.2-4.2L3 13.8l6 6 12-12-1.4-1.4z" fill="#fff"/></svg>`,
        danger: `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><circle cx="12" cy="12" r="10" fill="#f44336"/><path d="M15 9l-6 6m0-6l6 6" stroke="#fff" stroke-width="2"/></svg>`,
        warning: `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><circle cx="12" cy="12" r="10" fill="#ff9800"/><path d="M11 17h2v-2h-2v2zm0-4h2V7h-2v6z" fill="#fff"/></svg>`,
        info: `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><circle cx="12" cy="12" r="10" fill="#2196f3"/><path d="M11 17h2v-2h-2v2zm0-4h2V7h-2v6z" fill="#fff"/></svg>`,
    };
    show(message="Sample Message", toastType="info", duration = 5000){
        // Check if toast type is valid, otherwise make info toast as the default
        if(!Object.keys(this.toastIcon).includes(toastType))
            toastType = `info`;
        // Creatign the Toast Box Element
        this.toastBox = document.createElement('div')
        // Adding .toast class to Toast Box Element
        this.toastBox.classList.add('toast', `toast-${toastType}`)
        // Toast box content
        this.toastBox.innerHTML = `<button class="toast-close-btn"><svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 96 960 960" width="24"><path d="M480 606.923 273.077 813.846q-8.615 8.615-21.231 8.615-12.615 0-21.231-8.615-8.615-8.615-8.615-21.231 0-12.615 8.615-21.231L437.077 585.692 230.154 378.769q-8.615-8.615-8.615-21.231 0-12.615 8.615-21.231 8.615-8.615 21.231-8.615 12.615 0 21.231 8.615L480 564.077l206.923-206.923q8.615-8.615 21.231-8.615 12.615 0 21.231 8.615 8.615 8.615 8.615 21.231 0 12.615-8.615 21.231L522.923 585.692l206.923 206.923q8.615 8.615 8.615 21.231 0 12.615-8.615 21.231-8.615 8.615-21.231 8.615-12.615 0-21.231-8.615L480 606.923Z"/></svg></button>
            <div class="toast-content-wrapper">
            <div class="toast-icon">
                ${this.toastIcon[toastType]}
            </div>
            <div class="toast-message">${message}</div>
            <div class="toast-progress"></div>
            </div>`;
        // Set Toast Duration
        this.duration = duration
        // Update Toast Duration
        this.toastBox.querySelector('.toast-progress').style.animationDuration = `${this.duration / 1000}s`
 
        // Remove Current Toast Notification if Exists
        if(document.body.querySelector('.toast') != null)
            document.body.querySelector('.toast').remove();
        // Append New Toast Notification to the document
        document.body.appendChild(this.toastBox)
        // Trigger closing duration
        this.triggerClose()
        // When Close Icon/Button is clicked event listener
        this.toastBox.querySelector('.toast-close-btn').addEventListener('click', e=>{
            e.preventDefault()
            // Trigger immediate closing
            this.triggerClose(0)
        })
    }
    triggerClose(closeDuration = null){
        // Set toast duration as the closing delay if the closing duration value is null
        if(closeDuration == null){
            closeDuration=this.duration
        }
        setTimeout(()=>{
            // adding closing class for closing animation
            this.toastBox.classList.add('closing')
            // trigger removing the toast notification
            this.closeToast()
        },closeDuration)
    }
    closeToast(){
        // Set removing toast delay
        setTimeout(()=>{
            this.toastBox.remove();
        }, 500)
    }
}